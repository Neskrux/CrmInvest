// Script de teste para simular diferentes empresa_id
// Execute este c√≥digo no console do navegador para testar

// Fun√ß√£o para simular login com empresa_id espec√≠fico
function simularEmpresa(empresaId) {
  const usuarios = {
    1: { 
      empresa_id: 1, 
      nome: 'Usu√°rio Empresa 1', 
      tipo: 'admin',
      email: 'teste1@empresa.com'
    },
    5: { 
      empresa_id: 5, 
      nome: 'Usu√°rio Incorporadora', 
      tipo: 'admin',
      email: 'teste5@incorporadora.com'
    },
    10: { 
      empresa_id: 10, 
      nome: 'Usu√°rio Empresa 10', 
      tipo: 'admin',
      email: 'teste10@empresa.com'
    }
  };
  
  const usuario = usuarios[empresaId];
  if (!usuario) {
    console.error('Empresa ID inv√°lido. Use: 1, 5 ou 10');
    return;
  }
  
  // Simular dados no localStorage
  localStorage.setItem('user', JSON.stringify(usuario));
  localStorage.setItem('token', 'token-teste-' + empresaId);
  
  console.log(`‚úÖ Simulando empresa_id: ${empresaId}`);
  console.log('Usu√°rio:', usuario);
  console.log('üîÑ Recarregue a p√°gina para ver as mudan√ßas');
  
  return usuario;
}

// Fun√ß√£o para resetar
function resetarTeste() {
  localStorage.removeItem('user');
  localStorage.removeItem('token');
  console.log('üîÑ Resetado. Recarregue a p√°gina');
}

// Fun√ß√£o para verificar estado atual
function verificarEstado() {
  const user = localStorage.getItem('user');
  const token = localStorage.getItem('token');
  
  console.log('üìä Estado atual:');
  console.log('Usu√°rio:', user ? JSON.parse(user) : 'null');
  console.log('Token:', token ? 'presente' : 'ausente');
  
  if (user) {
    const userData = JSON.parse(user);
    console.log(`üè¢ Empresa ID: ${userData.empresa_id}`);
    console.log(`üë§ Nome: ${userData.nome}`);
  }
}

// Fun√ß√£o para testar textos espec√≠ficos
function testarTextos() {
  // Simular o hook useBranding
  const user = localStorage.getItem('user');
  if (!user) {
    console.log('‚ùå Nenhum usu√°rio logado. Use simularEmpresa(5) primeiro');
    return;
  }
  
  const userData = JSON.parse(user);
  const empresaId = userData.empresa_id;
  
  // Configura√ß√£o de textos (mesma do branding.js)
  const textos = {
    default: {
      pacientes: 'Pacientes',
      consultores: 'Consultores',
      clinicas: 'Cl√≠nicas',
      agendamentos: 'Agendamentos',
      fechamentos: 'Fechamentos'
    },
    5: {
      pacientes: 'Clientes',
      consultores: 'Corretores', 
      clinicas: 'Empreendimentos',
      agendamentos: 'Agendamentos',
      fechamentos: 'Fechamentos'
    }
  };
  
  const textosAtuais = textos[empresaId] || textos.default;
  
  console.log('üìù Textos atuais:');
  console.log(`Pacientes ‚Üí ${textosAtuais.pacientes}`);
  console.log(`Consultores ‚Üí ${textosAtuais.consultores}`);
  console.log(`Cl√≠nicas ‚Üí ${textosAtuais.clinicas}`);
  console.log(`Agendamentos ‚Üí ${textosAtuais.agendamentos}`);
  console.log(`Fechamentos ‚Üí ${textosAtuais.fechamentos}`);
}

// Expor fun√ß√µes globalmente
window.simularEmpresa = simularEmpresa;
window.resetarTeste = resetarTeste;
window.verificarEstado = verificarEstado;
window.testarTextos = testarTextos;

console.log('üß™ Script de teste carregado!');
console.log('Comandos dispon√≠veis:');
console.log('- simularEmpresa(5)  // Simular incorporadora');
console.log('- simularEmpresa(1)  // Simular empresa padr√£o');
console.log('- resetarTeste()     // Resetar');
console.log('- verificarEstado()  // Ver estado atual');
console.log('- testarTextos()     // Ver textos atuais');
