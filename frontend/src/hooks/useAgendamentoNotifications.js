import { useEffect, useLayoutEffect, useState, useRef, useCallback } from 'react';
import { useAuth } from '../contexts/AuthContext';
import io from 'socket.io-client';
import logoBrasao from '../images/logobrasaopreto.png';

const useAgendamentoNotifications = () => {
  const { user, isIncorporadora } = useAuth();
  const [socket, setSocket] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const [showAgendamentoModal, setShowAgendamentoModal] = useState(false);
  const [agendamentoData, setAgendamentoData] = useState(null);
  const audioInstanceRef = useRef(null);
  const modalTimerRef = useRef(null);
  const previousModalStateRef = useRef(false); // Rastrear estado anterior do modal para detectar transi√ß√µes
  const audioStartedRef = useRef(false); // Rastrear se a m√∫sica j√° come√ßou a tocar
  const timerCreatedAtRef = useRef(null); // Timestamp de quando o timer foi criado para prote√ß√£o
  const preloadedAudioRef = useRef(null); // √Åudio pr√©-carregado para iniciar mais r√°pido
  const socketRef = useRef(null); // Ref para rastrear socket sem causar re-renders
  const isInitializedRef = useRef(false); // Ref para garantir que s√≥ inicializa uma vez

  // Fun√ß√£o para parar m√∫sica - usar useCallback para garantir que sempre tenha acesso ao ref atual
  const stopAgendamentoSound = useCallback(() => {
    if (audioInstanceRef.current) {
      audioInstanceRef.current.pause();
      audioInstanceRef.current.currentTime = 0;
      audioInstanceRef.current = null;
    }
  }, []);

  // Fun√ß√£o para tocar m√∫sica - usar useCallback para garantir que sempre tenha acesso ao ref atual
  const playAgendamentoSound = useCallback((musicaUrl) => {
    // CR√çTICO: Resetar audioStartedRef se n√£o h√° √°udio tocando
    // Isso garante que novas notifica√ß√µes possam tocar m√∫sica
    if (!audioInstanceRef.current || audioInstanceRef.current.paused) {
      audioStartedRef.current = false;
    }
    
    // Se j√° come√ßou a tocar E est√° realmente tocando, n√£o tentar novamente (evitar duplicatas)
    if (audioStartedRef.current && audioInstanceRef.current && !audioInstanceRef.current.paused) {
      console.log('üîä [AGENDAMENTO] M√∫sica j√° est√° tocando, ignorando nova tentativa');
      return;
    }
    
    // Prote√ß√£o: aguardar um pouco se uma tentativa anterior ainda est√° em andamento
    if (audioInstanceRef.current && audioInstanceRef.current.readyState < 2) {
      console.log('‚è≥ [AGENDAMENTO] √Åudio ainda carregando, aguardando...');
      setTimeout(() => playAgendamentoSound(musicaUrl), 100);
      return;
    }

    try {
      // Limpar √°udio anterior se existir
      if (audioInstanceRef.current) {
        try {
          audioInstanceRef.current.pause();
          audioInstanceRef.current.currentTime = 0;
        } catch (e) {
          // Ignorar erros ao limpar √°udio anterior
        }
        audioInstanceRef.current = null;
      }
      
      // Tentar reutilizar √°udio pr√©-carregado se dispon√≠vel
      const expectedSource = musicaUrl || `${process.env.PUBLIC_URL || ''}/audioNovoLead.mp3`;
      if (preloadedAudioRef.current) {
        // Verificar se √© o mesmo arquivo (URL completa ou apenas nome do arquivo)
        const preloadSrc = preloadedAudioRef.current.src || '';
        const isSameFile = preloadSrc.includes(musicaUrl || 'audioNovoLead.mp3') || 
                          (musicaUrl && preloadSrc.includes(musicaUrl.split('/').pop()));
        if (isSameFile) {
          console.log('‚ôªÔ∏è [AGENDAMENTO] Reutilizando √°udio pr√©-carregado');
          // Clonar o √°udio pr√©-carregado ao inv√©s de reutilizar diretamente
          // Isso evita problemas com listeners antigos ou estado inconsistente
          const preloadedSrc = preloadedAudioRef.current.src;
          const newAudio = new Audio(preloadedSrc);
          newAudio.volume = 1.0;
          newAudio.loop = false;
          newAudio.preload = 'auto';
          // N√£o fazer load() - deixar carregar naturalmente
          audioInstanceRef.current = newAudio;
          preloadedAudioRef.current = null; // Limpar ref ap√≥s usar
        } else {
          // Descarta pr√©-carregado se for arquivo diferente
          preloadedAudioRef.current = null;
        }
      }
      
      // Se n√£o reutilizou, criar novo
      if (!audioInstanceRef.current) {
        // Usar m√∫sica personalizada do SDR se dispon√≠vel, sen√£o usar √°udio padr√£o
        const audioSource = musicaUrl || `${process.env.PUBLIC_URL || ''}/audioNovoLead.mp3`;
        const audio = new Audio(audioSource);
        audio.volume = 1.0; // Volume m√°ximo
        audio.loop = false; // M√∫sica toca uma vez e para
        audio.preload = 'auto';
        
        audioInstanceRef.current = audio;
      }
      
      audioStartedRef.current = false;
      
      // Garantir que temos a refer√™ncia do √°udio
      const currentAudio = audioInstanceRef.current;
      if (!currentAudio) return;
      
      // Listener para quando a m√∫sica terminar - fechar modal automaticamente
      const handleAudioEnded = () => {
        console.log('üéµ [AUDIO] M√∫sica terminou - fechando modal automaticamente');
        audioStartedRef.current = false;
        stopAgendamentoSound();
        setShowAgendamentoModal(false);
        setAgendamentoData(null);
        if (modalTimerRef.current) {
          clearTimeout(modalTimerRef.current);
          modalTimerRef.current = null;
        }
        // Remover o listener ap√≥s usar
        if (currentAudio) {
          currentAudio.removeEventListener('ended', handleAudioEnded);
        }
      };
      
      currentAudio.addEventListener('ended', handleAudioEnded);
      
      // Tentar tocar m√∫sica quando o √°udio estiver pronto
      const tryPlay = (attemptNumber = 0) => {
        if (!audioInstanceRef.current) return;
        
        const playPromise = audioInstanceRef.current.play();
        
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              audioStartedRef.current = true;
              // Verificar se realmente est√° tocando ap√≥s a promise resolver
              if (audioInstanceRef.current && audioInstanceRef.current.paused) {
                console.warn('‚ö†Ô∏è [AGENDAMENTO] Promise resolveu mas √°udio est√° pausado, tentando novamente...');
                // Tentar novamente imediatamente
                setTimeout(() => {
                  if (audioInstanceRef.current && audioInstanceRef.current.paused) {
                    audioInstanceRef.current.play().catch(err => {
                      console.log('‚ùå [AGENDAMENTO] Falha ao tentar despausar:', err);
                    });
                  }
                }, 50);
              } else {
                console.log(`‚úÖ [AGENDAMENTO] M√∫sica tocando! (tentativa ${attemptNumber + 1})`);
              }
            })
            .catch(error => {
              // Erro de autoplay policy - tentar novamente com pequenos delays
              console.log(`‚ö†Ô∏è [AGENDAMENTO] Erro ao tocar (tentativa ${attemptNumber + 1}):`, error.message || error);
              // Estrat√©gia de retry mais agressiva: tentar tocar ap√≥s pequenos delays
              const retryDelays = [50, 100, 150, 200, 300, 500, 750, 1000, 1500, 2000, 2500, 3000]; // Mais tentativas com delays menores
              let retryCount = 0;
              
              const tryPlayAgain = () => {
                if (retryCount < retryDelays.length && audioInstanceRef.current) {
                  const delay = retryDelays[retryCount];
                  
                  setTimeout(() => {
                    if (audioInstanceRef.current && audioInstanceRef.current.paused && !audioStartedRef.current) {
                      audioInstanceRef.current.play()
                        .then(() => {
                          audioStartedRef.current = true;
                          console.log(`‚úÖ [AGENDAMENTO] M√∫sica tocando ap√≥s retry ${retryCount + 1}!`);
                        })
                        .catch((err) => {
                          retryCount++;
                          if (retryCount < retryDelays.length) {
                            tryPlayAgain();
                          } else {
                            console.log('‚ö†Ô∏è [AGENDAMENTO] M√∫sica n√£o tocar√° - todas as tentativas falharam');
                          }
                        });
                    }
                  }, delay);
                }
              };
              
              tryPlayAgain();
            });
        }
      };
      
      // Tentar tocar imediatamente
      tryPlay(0);
      
      // M√∫ltiplas tentativas iniciais com delays pequenos
      const immediateRetries = [25, 50, 75, 100, 150, 200];
      immediateRetries.forEach((delay, index) => {
        setTimeout(() => {
          if (audioInstanceRef.current && audioInstanceRef.current.paused && !audioStartedRef.current) {
            tryPlay(index + 1);
          }
        }, delay);
      });
      
      // Tentar tamb√©m quando o √°udio come√ßar a carregar
      audioInstanceRef.current.addEventListener('loadstart', () => {
        if (audioInstanceRef.current && audioInstanceRef.current.paused && !audioStartedRef.current) {
          console.log('üîÑ [AGENDAMENTO] √Åudio iniciando carregamento - tentando tocar...');
          tryPlay(100);
        }
      }, { once: true });
      
      // Tentar tamb√©m quando houver dados suficientes para tocar
      audioInstanceRef.current.addEventListener('loadeddata', () => {
        if (audioInstanceRef.current && audioInstanceRef.current.paused && !audioStartedRef.current) {
          console.log('üì• [AGENDAMENTO] √Åudio carregado - tentando tocar...');
          tryPlay(101);
        }
      }, { once: true });

      // Tentar tamb√©m quando o √°udio estiver pronto para tocar
      audioInstanceRef.current.addEventListener('canplay', () => {
        if (audioInstanceRef.current && audioInstanceRef.current.paused && !audioStartedRef.current) {
          console.log('‚ñ∂Ô∏è [AGENDAMENTO] √Åudio pronto - tentando tocar...');
          tryPlay(102);
        }
      }, { once: true });

      // Tentar quando o √°udio pode tocar sem interrup√ß√£o
      audioInstanceRef.current.addEventListener('canplaythrough', () => {
        if (audioInstanceRef.current && audioInstanceRef.current.paused && !audioStartedRef.current) {
          console.log('üéØ [AGENDAMENTO] √Åudio totalmente carregado - tentando tocar...');
          tryPlay(103);
        }
      }, { once: true });
    } catch (error) {
      console.error('‚ùå [AGENDAMENTO] Erro ao criar √°udio:', error);
    }
  }, [stopAgendamentoSound]);

  // REMOVIDO: useEffect para notifica√ß√µes pendentes do localStorage
  // N√£o √© mais necess√°rio pois removemos o reload autom√°tico
  // As notifica√ß√µes agora s√£o processadas diretamente quando o evento Socket.IO chega

  useEffect(() => {
    // Permitir entrada APENAS para admin da incorporadora
    if (user?.tipo !== 'admin' || user?.empresa_id !== 5) {
      console.log('‚ö†Ô∏è [SOCKET.IO] Usu√°rio n√£o autorizado:', {
        tipo: user?.tipo,
        empresa_id: user?.empresa_id
      });
      return;
    }

    // CR√çTICO: Permitir m√∫ltiplas conex√µes simult√¢neas por dispositivo
    // Cada dispositivo (PC/TV) deve ter sua pr√≥pria conex√£o Socket.IO
    // REMOVIDO: Bloqueio de inicializa√ß√£o que impedia m√∫ltiplas conex√µes
    // Com forceNew: true, cada conex√£o ser√° √∫nica mesmo se j√° houver uma existente

    // Configurar URL do backend - CORRIGIDO para produ√ß√£o
    let API_BASE_URL;
    if (process.env.REACT_APP_API_URL) {
      API_BASE_URL = process.env.REACT_APP_API_URL.replace('/api', '');
    } else if (process.env.NODE_ENV === 'production') {
      // Em produ√ß√£o, usar backend do Fly.dev
      API_BASE_URL = 'https://crminvest-backend.fly.dev';
    } else {
      API_BASE_URL = 'http://localhost:5000';
    }
    
    console.log('üîó [SOCKET.IO] Criando NOVA conex√£o Socket.IO:', {
      API_BASE_URL,
      NODE_ENV: process.env.NODE_ENV,
      REACT_APP_API_URL: process.env.REACT_APP_API_URL,
      deviceId: `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date().toISOString()
    });
    
    // CR√çTICO: forceNew: true para garantir que cada dispositivo tenha sua pr√≥pria conex√£o
    // Isso √© essencial para m√∫ltiplos PCs/TVs funcionarem simultaneamente
    const newSocket = io(API_BASE_URL, {
      transports: ['websocket', 'polling'], // Tentar websocket primeiro, fallback para polling
      forceNew: true, // ‚úÖ FOR√áAR nova conex√£o - cada dispositivo precisa da sua pr√≥pria!
      reconnection: true,
      reconnectionAttempts: Infinity, // Tentar reconectar infinitamente
      reconnectionDelay: 1000,
      reconnectionDelayMax: 5000,
      timeout: 20000,
      // Adicionar identificador √∫nico para cada dispositivo/aba
      query: {
        tabId: `tab_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        deviceId: `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        userId: user.id,
        empresaId: user.empresa_id
      },
      // Configura√ß√µes adicionais para produ√ß√£o
      upgrade: true,
      rememberUpgrade: true,
      autoConnect: true
    });
    
    // Guardar refer√™ncia do socket
    socketRef.current = newSocket;
    setSocket(newSocket);

    // Fun√ß√£o auxiliar para entrar no grupo (chamada m√∫ltiplas vezes se necess√°rio)
    const joinGroup = () => {
      if (newSocket.connected) {
        console.log('üì¢ [SOCKET.IO] Entrando no grupo incorporadora-notifications:', {
          socketId: newSocket.id,
          userId: user.id,
          empresaId: user.empresa_id,
          connected: newSocket.connected,
          deviceId: newSocket.query?.deviceId,
          timestamp: new Date().toISOString()
        });
        
        newSocket.emit('join-incorporadora-notifications', {
          userType: 'admin',
          userId: user.id,
          empresaId: user.empresa_id
        });
      } else {
        console.warn('‚ö†Ô∏è [SOCKET.IO] Socket n√£o conectado, aguardando conex√£o...');
      }
    };

    // CR√çTICO: Adicionar listener ANTES de entrar no grupo
    // Isso garante que eventos sejam capturados mesmo se a conex√£o j√° estiver estabelecida
    const handleNewAgendamento = (data) => {
      try {
        console.log('üîî [SOCKET.IO] Recebido evento new-agendamento-incorporadora:', {
          agendamentoId: data.agendamentoId,
          paciente_nome: data.paciente_nome,
          sdr_nome: data.sdr_nome,
          data_agendamento: data.data_agendamento,
          horario: data.horario,
          socketId: newSocket.id,
          deviceId: newSocket.query?.deviceId,
          tabId: newSocket.query?.tabId,
          userId: user.id,
          empresaId: user.empresa_id,
          connected: newSocket.connected,
          timestamp: new Date().toISOString(),
          url: window.location.href
        });
        
        // CR√çTICO: Resetar estado ANTES de processar nova notifica√ß√£o
        // Isso garante que cada notifica√ß√£o seja processada independentemente
        audioStartedRef.current = false;
        
        // Parar m√∫sica anterior se estiver tocando
        if (audioInstanceRef.current && !audioInstanceRef.current.paused) {
          console.log('üõë [AGENDAMENTO] Parando m√∫sica anterior para nova notifica√ß√£o');
          audioInstanceRef.current.pause();
          audioInstanceRef.current.currentTime = 0;
        }
        
        // Limpar timer anterior se existir
        if (modalTimerRef.current) {
          clearTimeout(modalTimerRef.current);
          modalTimerRef.current = null;
        }
        
        // Fechar modal anterior se estiver aberto
        // Sempre fechar para garantir que nova notifica√ß√£o apare√ßa
        setShowAgendamentoModal(false);
        setAgendamentoData(null);
        
        // Pr√©-carregar √°udio ANTES de mostrar modal
        const audioSource = data.sdr_musica || `${process.env.PUBLIC_URL || ''}/audioNovoLead.mp3`;
        try {
          const preloadAudio = new Audio(audioSource);
          preloadAudio.preload = 'auto';
          preloadAudio.volume = 1.0;
          preloadAudio.load();
          preloadedAudioRef.current = preloadAudio;
          console.log('üì¶ [AGENDAMENTO] √Åudio pr√©-carregado:', audioSource);
        } catch (e) {
          console.log('‚ö†Ô∏è [AGENDAMENTO] Erro ao pr√©-carregar √°udio:', e);
        }
        
        // Pequeno delay para garantir que o estado anterior foi limpo
        setTimeout(() => {
          // Mostrar modal diretamente
          setAgendamentoData(data);
          setShowAgendamentoModal(true);
          previousModalStateRef.current = false; // Ser√° atualizado para true no useLayoutEffect
          
          // CR√çTICO: Tocar m√∫sica IMEDIATAMENTE quando evento chegar
          // N√£o esperar pela renderiza√ß√£o do modal
          console.log('üîä [AGENDAMENTO] Tocando m√∫sica imediatamente ao receber evento...');
          playAgendamentoSound(data.sdr_musica);
          
          // Adicionar √† lista de notifica√ß√µes
          setNotifications(prev => [...prev, {
            id: Date.now(),
            type: 'new-agendamento',
            data,
            timestamp: new Date()
          }]);
          
          console.log('‚úÖ [SOCKET.IO] Notifica√ß√£o de agendamento processada e modal deve aparecer');
        }, 100); // Pequeno delay para garantir limpeza do estado
      } catch (error) {
        console.error('‚ùå [SOCKET.IO] Erro ao processar agendamento:', error);
      }
    };
    
    // Adicionar listener ANTES de entrar no grupo
    newSocket.on('new-agendamento-incorporadora', handleNewAgendamento);

    // Listener para confirma√ß√£o de entrada no grupo
    newSocket.on('joined-incorporadora-notifications', (data) => {
      if (data.success) {
        console.log('‚úÖ [SOCKET.IO] Confirmado: Entrou no grupo incorporadora-notifications:', {
          socketId: data.socketId,
          deviceId: newSocket.query?.deviceId,
          tabId: newSocket.query?.tabId,
          userId: user.id,
          empresaId: user.empresa_id,
          timestamp: data.timestamp,
          url: window.location.href
        });
      } else {
        console.error('‚ùå [SOCKET.IO] Falha ao entrar no grupo:', {
          motivo: data.motivo,
          socketId: newSocket.id,
          deviceId: newSocket.query?.deviceId,
          timestamp: data.timestamp
        });
        // Tentar novamente ap√≥s delay
        setTimeout(() => {
          if (newSocket.connected) {
            console.log('üîÑ [SOCKET.IO] Tentando entrar no grupo novamente ap√≥s falha...');
            joinGroup();
          }
        }, 2000);
      }
    });

    // Entrar no grupo quando conectado
    if (newSocket.connected) {
      joinGroup();
    }

    // Log de conex√£o/desconex√£o - MELHORADO para produ√ß√£o
    newSocket.on('connect', () => {
      console.log('‚úÖ [SOCKET.IO] Socket conectado:', {
        socketId: newSocket.id,
        userId: user.id,
        empresaId: user.empresa_id,
        timestamp: new Date().toISOString()
      });
      
      // CR√çTICO: Re-entrar no grupo de notifica√ß√µes ao reconectar
      // Aguardar um pouco para garantir que a conex√£o est√° est√°vel
      setTimeout(() => {
        if (newSocket.connected) {
          joinGroup();
        }
      }, 100);
    });

    newSocket.on('disconnect', (reason) => {
      console.warn('‚ö†Ô∏è [SOCKET.IO] Socket desconectado:', {
        reason,
        socketId: newSocket.id,
        timestamp: new Date().toISOString()
      });
      
      // Tentar reconectar se n√£o foi desconex√£o intencional
      if (reason === 'io server disconnect') {
        // Servidor desconectou, reconectar manualmente
        newSocket.connect();
      }
    });

    newSocket.on('connect_error', (error) => {
      console.error('‚ùå [SOCKET.IO] Erro de conex√£o:', {
        error: error.message,
        type: error.type,
        timestamp: new Date().toISOString()
      });
    });

    newSocket.on('reconnect', (attemptNumber) => {
      console.log('üîÑ [SOCKET.IO] Reconectado ap√≥s', attemptNumber, 'tentativas:', {
        socketId: newSocket.id,
        timestamp: new Date().toISOString()
      });
      
      // Re-entrar no grupo ap√≥s reconex√£o
      joinGroup();
    });

    newSocket.on('reconnect_attempt', (attemptNumber) => {
      console.log('üîÑ [SOCKET.IO] Tentativa de reconex√£o #' + attemptNumber);
    });

    newSocket.on('reconnect_error', (error) => {
      console.error('‚ùå [SOCKET.IO] Erro ao reconectar:', error.message);
    });

    newSocket.on('reconnect_failed', () => {
      console.error('‚ùå [SOCKET.IO] Falha ao reconectar ap√≥s todas as tentativas');
      // Tentar reconectar manualmente ap√≥s delay
      setTimeout(() => {
        console.log('üîÑ [SOCKET.IO] Tentando reconectar manualmente...');
        newSocket.connect();
      }, 5000);
    });

    // Listener para pong (resposta do heartbeat)
    newSocket.on('pong', (data) => {
      const latency = Date.now() - data.receivedTimestamp;
      console.log('üíì [SOCKET.IO] Heartbeat OK - Lat√™ncia:', latency + 'ms');
    });

    // Heartbeat: Verificar conex√£o periodicamente (a cada 30 segundos)
    const heartbeatInterval = setInterval(() => {
      if (newSocket && !newSocket.connected) {
        console.warn('‚ö†Ô∏è [SOCKET.IO] Conex√£o perdida detectada, tentando reconectar...');
        newSocket.connect();
      } else if (newSocket && newSocket.connected) {
        // Verificar se ainda est√° no grupo (ping)
        newSocket.emit('ping', { timestamp: Date.now() });
        
        // Verificar se ainda est√° no grupo - re-entrar se necess√°rio
        // Isso garante que mesmo se houver algum problema, re-entra automaticamente
        const lastJoinCheck = localStorage.getItem('last_join_check_agendamento');
        const now = Date.now();
        if (!lastJoinCheck || (now - parseInt(lastJoinCheck)) > 60000) { // A cada 1 minuto
          joinGroup();
          localStorage.setItem('last_join_check_agendamento', now.toString());
        }
      }
    }, 30000); // 30 segundos

    // Cleanup - melhorado para produ√ß√£o
    return () => {
      console.log('üßπ [SOCKET.IO] Limpando conex√£o Socket.IO:', {
        socketId: newSocket.id,
        connected: newSocket.connected,
        timestamp: new Date().toISOString()
      });
      
      // Limpar heartbeat
      if (heartbeatInterval) {
        clearInterval(heartbeatInterval);
      }
      
      // Remover todos os listeners antes de desconectar
      newSocket.off('new-agendamento-incorporadora');
      newSocket.off('joined-incorporadora-notifications');
      newSocket.off('pong');
      newSocket.off('connect');
      newSocket.off('disconnect');
      newSocket.off('connect_error');
      newSocket.off('reconnect');
      newSocket.off('reconnect_attempt');
      newSocket.off('reconnect_error');
      newSocket.off('reconnect_failed');
      
      // Resetar flag de inicializa√ß√£o
      isInitializedRef.current = false;
      socketRef.current = null;
      
      // Parar m√∫sica apenas se n√£o houver modal ativo
      if (audioInstanceRef.current) {
        audioInstanceRef.current.pause();
        audioInstanceRef.current.currentTime = 0;
        audioInstanceRef.current = null;
      }
      
      // Desconectar socket
      if (newSocket.connected) {
        newSocket.disconnect();
      }
    };
  }, [user?.id, user?.empresa_id, user?.tipo, playAgendamentoSound, stopAgendamentoSound]);

  // useLayoutEffect para criar timer e tocar m√∫sica AP√ìS renderiza√ß√£o do modal
  useLayoutEffect(() => {
    // S√≥ executar quando modal abrir (mudar de false para true)
    const wasClosed = !previousModalStateRef.current;
    const isNowOpen = showAgendamentoModal && agendamentoData;
    
    // Se modal acabou de abrir, criar timer e tocar m√∫sica
    if (wasClosed && isNowOpen) {
      // Prote√ß√£o: se j√° existe timer recente (< 2 segundos), n√£o criar novo (prote√ß√£o contra StrictMode)
      const existingTimerAge = timerCreatedAtRef.current ? Date.now() - timerCreatedAtRef.current : Infinity;
      if (existingTimerAge < 2000 && modalTimerRef.current) {
        console.log('‚ö†Ô∏è [AGENDAMENTO] Timer j√° existe e √© recente, ignorando cria√ß√£o duplicada');
        previousModalStateRef.current = showAgendamentoModal;
        return;
      }
      
      console.log('üì± [AGENDAMENTO] Modal aberto - criando timer e tocando m√∫sica');
      
      // Limpar timer anterior se existir
      if (modalTimerRef.current) {
        clearTimeout(modalTimerRef.current);
        modalTimerRef.current = null;
      }
      
      // Criar timer de 20 segundos
      const timerCreatedAt = Date.now();
      timerCreatedAtRef.current = timerCreatedAt;
      
      const mainTimer = setTimeout(() => {
        // Verificar se o timer ainda √© v√°lido (n√£o foi substitu√≠do)
        if (modalTimerRef.current === mainTimer && timerCreatedAtRef.current === timerCreatedAt) {
          console.log('‚è∞ [TIMER] 20 segundos - fechando modal');
          audioStartedRef.current = false;
          stopAgendamentoSound();
        setShowAgendamentoModal(false);
        setAgendamentoData(null);
          previousModalStateRef.current = false;
          modalTimerRef.current = null;
          timerCreatedAtRef.current = null;
        }
      }, 20000); // 20 segundos - sempre fecha
      
      modalTimerRef.current = mainTimer;
      console.log('‚úÖ [TIMER] Timer de 20s criado (timestamp:', timerCreatedAt, ')');
      
      // Verificar se m√∫sica j√° est√° tocando (pode ter sido iniciada quando evento chegou)
      // Se n√£o estiver tocando, tentar tocar agora como backup
      if (showAgendamentoModal && agendamentoData) {
        if (!audioStartedRef.current || (audioInstanceRef.current && audioInstanceRef.current.paused)) {
          console.log('üîä [AGENDAMENTO] M√∫sica n√£o est√° tocando, tentando tocar ap√≥s renderiza√ß√£o...');
          playAgendamentoSound(agendamentoData.sdr_musica);
          
          // Tentar novamente ap√≥s pequenos delays como backup
          [100, 200, 300].forEach((delay) => {
            setTimeout(() => {
              if (showAgendamentoModal && agendamentoData && audioInstanceRef.current && audioInstanceRef.current.paused) {
                console.log(`üîÑ [AGENDAMENTO] Retry backup ap√≥s ${delay}ms...`);
                try {
                  audioInstanceRef.current.play()
                    .then(() => {
                      audioStartedRef.current = true;
                      console.log(`‚úÖ [AGENDAMENTO] M√∫sica iniciada no retry backup!`);
                    })
                    .catch(() => {
                      // Silencioso - j√° est√° tentando no retry interno
                    });
                } catch (e) {
                  // Silencioso
                }
              }
            }, delay);
          });
        } else {
          console.log('‚úÖ [AGENDAMENTO] M√∫sica j√° est√° tocando, n√£o tentar novamente');
        }
      }
    }
    
    // Atualizar ref do estado anterior AP√ìS processar
    previousModalStateRef.current = showAgendamentoModal;
  }, [showAgendamentoModal, agendamentoData, playAgendamentoSound, stopAgendamentoSound]);

  // useEffect para limpar timer e m√∫sica quando modal fechar (transi√ß√£o true -> false)
  useEffect(() => {
    const wasOpen = previousModalStateRef.current;
    const isNowClosed = !showAgendamentoModal;
    
    // Atualizar ref do estado anterior
    previousModalStateRef.current = showAgendamentoModal;
    
    // S√≥ limpar se estava aberto e agora est√° fechado (transi√ß√£o true -> false)
    if (wasOpen && isNowClosed) {
      console.log('üõë [AGENDAMENTO] Modal fechado - limpando timer e m√∫sica');
      
      // CR√çTICO: Resetar TODOS os estados para garantir que pr√≥xima notifica√ß√£o funcione
      audioStartedRef.current = false;
      
      // Proteger contra limpar timer muito recente (< 1 segundo)
      const timerAge = timerCreatedAtRef.current ? Date.now() - timerCreatedAtRef.current : Infinity;
      if (timerAge > 1000) {
        if (modalTimerRef.current) {
          clearTimeout(modalTimerRef.current);
          modalTimerRef.current = null;
        }
        timerCreatedAtRef.current = null;
      } else {
        console.log('‚ö†Ô∏è [AGENDAMENTO] Timer muito recente, n√£o limpando (idade:', timerAge, 'ms)');
      }
      
      // Parar m√∫sica
      if (audioInstanceRef.current) {
        stopAgendamentoSound();
      }
      
      // Limpar dados do agendamento
      setAgendamentoData(null);
      
      // Limpar √°udio pr√©-carregado
      preloadedAudioRef.current = null;
      
      console.log('‚úÖ [AGENDAMENTO] Estado completamente resetado para pr√≥xima notifica√ß√£o');
    }
  }, [showAgendamentoModal, stopAgendamentoSound]);

  // Fun√ß√£o para limpar notifica√ß√µes
  const clearNotifications = () => {
    setNotifications([]);
  };

  // Fun√ß√£o para fechar modal
  const fecharModalAgendamento = () => {
    setShowAgendamentoModal(false);
    setAgendamentoData(null);
  };

  // Componente da Modal
  const AgendamentoModal = () => {
    if (!showAgendamentoModal || !agendamentoData) return null;

    return (
      <div style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'rgba(15, 23, 42, 0.95)',
        backdropFilter: 'blur(8px)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 9999
      }}>
        <div style={{
          background: 'white',
          borderRadius: '12px',
          padding: '2rem',
          maxWidth: '400px',
          width: '90%',
          boxShadow: '0 12px 24px -6px rgba(0, 0, 0, 0.25)',
          position: 'relative'
        }}>
          {/* Logo no topo */}
          <div style={{
            position: 'absolute',
            top: '-20px',
            left: '50%',
            transform: 'translateX(-50%)',
            width: '40px',
            height: '40px',
            background: 'white',
            borderRadius: '50%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
            border: '3px solid #e5e7eb'
          }}>
            <img 
              src={logoBrasao}
              alt="IM Solumn" 
              style={{
                width: '40px',
                height: '40px',
                objectFit: 'contain'
              }}
            />
          </div>
          
          {/* Foto do SDR */}
          {agendamentoData.sdr_foto && (
            <div style={{
              display: 'flex',
              justifyContent: 'center',
              marginBottom: '1rem',
              marginTop: '1.5rem'
            }}>
              <img 
                src={agendamentoData.sdr_foto} 
                alt={agendamentoData.sdr_nome}
                style={{
                  width: '80px',
                  height: '80px',
                  borderRadius: '50%',
                  objectFit: 'cover',
                  border: '3px solid #3b82f6'
                }}
              />
            </div>
          )}
          
          {/* T√≠tulo */}
          <h2 style={{
            fontSize: '1.5rem',
            fontWeight: '800',
            textAlign: 'center',
            marginBottom: '0.5rem',
            color: '#1e293b'
          }}>
            Novo Agendamento!
          </h2>
          
          <p style={{
            textAlign: 'center',
            color: '#64748b',
            marginBottom: '1.2rem',
            fontSize: '1,5rem'
          }}>
            Agendado por <strong>{agendamentoData.sdr_nome}</strong>
          </p>
          
          {/* Dados do agendamento */}
          <div style={{
            background: '#f8fafc',
            padding: '1rem',
            borderRadius: '8px',
            marginBottom: '1.5rem'
          }}>
            <div style={{ marginBottom: '0.75rem' }}>
              <div style={{ fontSize: '0.875rem', color: '#64748b', marginBottom: '0.25rem' }}>
                Cliente
              </div>
              <div style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1e293b' }}>
                {agendamentoData.paciente_nome}
              </div>
            </div>
            
            <div style={{ marginBottom: '0.75rem' }}>
              <div style={{ fontSize: '0.875rem', color: '#64748b', marginBottom: '0.25rem' }}>
                Data e Hor√°rio
              </div>
              <div style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1e293b' }}>
                {new Date(agendamentoData.data_agendamento).toLocaleDateString('pt-BR')} √†s {agendamentoData.horario}
              </div>
            </div>
          </div>

          {/* M√∫sica tocando */}
          <p style={{
            textAlign: 'center',
            color: '#10b981',
            marginTop: '1rem',
            fontSize: '0.875rem',
            fontWeight: '600'
          }}>
            üéµ Reproduzindo m√∫sica do {agendamentoData.sdr_nome}...
          </p>
        </div>
      </div>
    );
  };

  return {
    socket,
    notifications,
    clearNotifications,
    showAgendamentoModal,
    agendamentoData,
    fecharModalAgendamento,
    AgendamentoModal
  };
};

export default useAgendamentoNotifications;

