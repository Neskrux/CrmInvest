/**
 * Logger seguro para produ√ß√£o
 * Remove informa√ß√µes sens√≠veis dos logs
 */

const isDevelopment = process.env.NODE_ENV === 'development';

// Campos sens√≠veis que devem ser mascarados
const SENSITIVE_FIELDS = [
  'senha',
  'password',
  'token',
  'authorization',
  'auth',
  'secret',
  'key',
  'api_key',
  'access_token',
  'refresh_token'
];

// Fun√ß√£o para mascarar dados sens√≠veis
const maskSensitiveData = (data) => {
  if (!data) return data;
  
  if (typeof data === 'string') {
    return '***';
  }
  
  if (typeof data === 'object') {
    const masked = { ...data };
    
    for (const key in masked) {
      if (SENSITIVE_FIELDS.some(field => key.toLowerCase().includes(field))) {
        masked[key] = '***';
      } else if (typeof masked[key] === 'object') {
        masked[key] = maskSensitiveData(masked[key]);
      }
    }
    
    return masked;
  }
  
  return data;
};

// Fun√ß√£o para log seguro
const safeLog = (level, message, data = null) => {
  // Em produ√ß√£o, n√£o logar dados sens√≠veis
  if (!isDevelopment && data) {
    data = maskSensitiveData(data);
  }
  
  const logMessage = data ? `${message} ${JSON.stringify(data)}` : message;
  
  switch (level) {
    case 'info':
      console.log(`‚ÑπÔ∏è  ${logMessage}`);
      break;
    case 'warn':
      console.warn(`‚ö†Ô∏è  ${logMessage}`);
      break;
    case 'error':
      console.error(`‚ùå ${logMessage}`);
      break;
    case 'success':
      console.log(`‚úÖ ${logMessage}`);
      break;
    case 'debug':
      if (isDevelopment) {
        console.log(`üîç ${logMessage}`);
      }
      break;
    default:
      console.log(logMessage);
  }
};

// Helper para log de login (sem dados sens√≠veis)
const logLoginAttempt = (email, success) => {
  if (isDevelopment) {
    console.log(`üîê Tentativa de login: ${email} - ${success ? 'SUCESSO' : 'FALHA'}`);
  } else {
    console.log(`üîê Tentativa de login: ${success ? 'SUCESSO' : 'FALHA'}`);
  }
};

// Helper para log de erro
const logError = (error, context = '') => {
  const errorMessage = context ? `${context}: ${error.message}` : error.message;
  
  if (isDevelopment) {
    console.error(`‚ùå ${errorMessage}`, error.stack);
  } else {
    console.error(`‚ùå ${errorMessage}`);
  }
};

// Helper para log de request (sem dados sens√≠veis)
const logRequest = (method, path, statusCode, duration) => {
  const emoji = statusCode >= 400 ? '‚ùå' : '‚úÖ';
  console.log(`${emoji} ${method} ${path} - ${statusCode} (${duration}ms)`);
};

module.exports = {
  safeLog,
  logLoginAttempt,
  logError,
  logRequest,
  isDevelopment
};

